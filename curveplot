#!/usr/bin/env python3

# This file is part of PyPSUcurvetrace, a toolbox for I/V curve tracing of electronic parts using programmable power supplies.
#
# PyPSUcurvetrace is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# PyPSUcurvetrace is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with PyPSUcurvetrace.  If not, see <http://www.gnu.org/licenses/>.

import traceback
import sys
import glob
import argparse
# import configparser
# import datetime
import numpy as np
# import time
import matplotlib.pyplot as plt

from lib.read_datafile import read_datafile
from lib.plot_curves import plot_curves
from lib.curvetrace_tools import say_hello

################
# main program #
################

# parse input arguments (if any):
parser = argparse.ArgumentParser(description='curveplot is a Python program for plotting of PyPSUcurvetrace data.')
parser.add_argument('datafiles', nargs='+', help='Names (and paths) of PyPSUcurvetrace data files. A list of multiple files can be used for an overlay plot. Files can also be specified using wildcards.')

parser.add_argument('--type', help='Plot type. Format: <X><Y><C>, where X is the x-axis parameter, Y is the y-axis parameter, and C is the curves parameter; parameters are U1, I1, U2, I2. Example: -type U1I1U2. Default (if not format is not specified): type = U1I1U2')

parser.add_argument('--width', type=float, help='Width of the figure')
parser.add_argument('--height', type=float, help='Height of the figure')

parser.add_argument('--pairs', action='store_true', help='Plot overlays of all datafile pairs in the datafiles directory (specify the directory only, without a filename)')

parser.add_argument('--xlimit', type=float, help='Max. x-axis value')
parser.add_argument('--ylimit', type=float, help='Max. y-axis value')
parser.add_argument('--xscale', help='x-axis multiplier prefix (G, M, k, m, µ, n, p, f)')
parser.add_argument('--yscale', help='y-axis multiplier prefix (G, M, k, m, µ, n, p, f)')

parser.add_argument('--title', help='Plot title')

parser.add_argument('--xlabel', help='x-axis label')
parser.add_argument('--ylabel', help='y-axis label')

parser.add_argument('--linecolor', help='Color of curves (any of the Matplotlib color specs)')
parser.add_argument('--linestyle', help='Line style of curves (solid, dashed, dashdot, dotted)')
parser.add_argument('--linewidth', type=float, help='Line width of curves and plot frame')

parser.add_argument('--gridcolor', help='Grid line color')
parser.add_argument('--nogrid', action='store_true', help='Turn off grid lines')

parser.add_argument('--nobranding', action='store_true', help='Hide PyPSUcurvetrace label')

parser.add_argument('--fontsize', type=float, help='Font size')
parser.add_argument('--fontname', help='Font name')

args = parser.parse_args()

# Say Hello:
say_hello('curveplot', 'Plotting of PyPSUcurvetrace data')

# determine data file(s):
datafiles = args.datafiles

# pairs option:
pairs = False
if args.pairs:
	pairs = True
if pairs:
	print('******** --pairs option not yet implemented!')


# determine plot type:
plot_type = 'U1I1U2' # default
if args.type:
	plot_type = args.type.upper()

# determine figure size:
width = 10 # default
height = 7 # default
if args.width:
	width = args.width
if args.height:
	height = args.height

# determine data limits and scales:
xlimit = None # default
ylimit = None # default
xscale = None
yscale = None
if args.xlimit:
	xlimit = args.xlimit
if args.ylimit:
	ylimit = args.ylimit
if args.xscale:
	xscale = args.xscale
if args.yscale:
	yscale = args.yscale
	
# determine axis labels and plot title:
xlabel = None # default
ylabel = None # default
title  = None # default
if args.title:
	title = args.title
if args.xlabel:
	xlabel = args.xlabel
if args.ylabel:
	ylabel = args.ylabel

# determine line width:
linewidth = 2.0 # default
if args.linewidth:
	linewidth = args.linewidth

# determine line color:
if len(datafiles) == 1:
	linecolor = ('k',) # default
else:
	linecolor = plt.cm.rainbow(np.linspace(0, 1, len(datafiles)))

if args.linecolor:
	linecolor = (args.linecolor,)
if args.linestyle:
	linestyle = (args.linestyle,)
if len(linecolor) < len(datafiles):
	print('WARNING: will use the same linecolor for all datafiles!')
	u = tuple( )
	for i in range(len(datafiles)):
		u += (linecolor[0],)
	linecolor = u 

# determine line style:
linestyle = ('solid',) # default
if len(linestyle) < len(datafiles):
	print('WARNING: will use the same linestyle for all datafiles!')
	u = tuple( )
	for i in range(len(datafiles)):
		u += (linestyle[0],)
	linestyle = u 

# grid lines:
grid_on = True
gridcolor = 'lightgray'
if args.nogrid:
	grid_on = False
if args.gridcolor:
	gridcolor = args.gridcolor
	
# PyPSU branding label:
nobranding = False
if args.nobranding:
	nobranding = True

# load data from files:
data = label = preheat = tuple( )

for i in range(len(datafiles)):
	d, l, p = read_datafile(datafiles[i])
	data    += (d,)
	label   += (l,)
	preheat += (p,)

# determine font size and name:
fontsize = None # default
fontname = None # default
if args.fontsize:
	fontsize = args.fontsize
if args.fontname:
	fontname = args.fontname

# plot title:
if title is None:
	title = ''
	for i in range(len(label)):
		if i == 0:
			title = label[0]
		else:
			title += ', ' + label[i]

# plot data:
plt.figure(figsize=(width, height))
plot_curves( data = data,
             xlimit = xlimit,
             ylimit = ylimit,
             plot_type = plot_type,
             linecolor = linecolor,
             linestyle = linestyle,
             linewidth = linewidth,
             gridcolor = gridcolor,
             grid_on   = grid_on,
             nobranding = nobranding,
             title  = title,
             xlabel = xlabel,
             ylabel = ylabel,
             xscale = xscale,
             yscale = yscale,
             fontsize = fontsize,
             fontname = fontname)

# Show the plot:
print('Close plot window to exit.')
plt.show()
