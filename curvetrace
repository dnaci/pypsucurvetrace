#!/usr/bin/env python3

# Curve tracer program:
# Use one PPS power supply to determine a single trace of a two-terminal DUT:
# * Read configuration file (for PPS PSU connections)
# * Ask for sample name and start a log file for the test
# * Ask for the min. and max. voltage to be applied to the DUT
# * Ask for number of voltage steps
# * Ask for current limit (max. current allowed for the DUT)
# * Ask for power limit (max. power allowed for the DUT)
# * Apply specified voltages to to DUT and read the current
# * Output the voltage / current data
#
# Hardware setup:
# * Computer connected to programmable Voltcraft PPS power supply via USB cable (UART interface in PPS)
# * DUT device connected to power supply output:
#	PSU-POS -- DUT-1
#	PSU-NEG -- DUT-2
#
# This file is part of curvetracePy, a toolbox for curve tracing using programmable Voltcraft PPS power supplies.
#
# curvetracePy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# curvetracePy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ruediPy.  If not, see <http://www.gnu.org/licenses/>.
# 
# curvetracePy: a toolbox for operation of PEM electrolysis cells.
# Copyright 2020, Matthias Brennwald (mbrennwa@gmail.com)

# make shure Python knows where to look for the curvetracePy Python code
# http://stackoverflow.com/questions/4580101/python-add-pythonpath-during-command-line-module-run
# Example (bash): export PYTHONPATH=~/curvetracePy

# imports:
### import argparse
### import datetime
import time
import configparser
import numpy as np
from termcolor import colored
import powersupply_PPS


############################
# function to print output #
############################

def printit(text,f='',comm=''):
	# print date/time followed by text either to stdout (if f is empty) or to file (if f is not empty)
	# prepend date/time:
	# now = datetime.datetime.now()
	# text = now.strftime("%Y-%m-%d %H:%M:%S") + '\t' + text

	#print text:
	print(text)
	if f:
		if len(comm):
			text = comm + ' ' + text
		print(text,file=f)
		f.flush()
	return


######################################
# connect and configure power supply #
######################################

def get_PSU(config,label):
	
	if len(config[label]['COMPORT']) == 0:
		print('COM port for power supply ' + label + 'empty. Leaving ' + label + ' unconfigured.')
		PSU.VMAX = 0.0
		PSU.VMIN = 0.0
		PSU.IMAX = 0.0
		PSU.TSETTLE = 0.0
		PSU.MODEL = 'NONE'
		PSU.configured = False

	else:
		# connect to PSU:
		print ('Connecting to power supply ' + label + '...')
		PSU = powersupply_PPS.PPS(port=config[label]['COMPORT'], reset=False, prom=None)
		PSU.output(False) # make sure it is turned off

		# determine minimum voltage of the PSU:
		PSU.VMIN = float(config[label]['VOLTAGE_MIN'])

		# determine settle time:
		PSU.TSETTLE = float(config[label]['SETTLE_SECONDS'])

		PSU.configured = True

		# show summary
		### print ('Power supply ' + label + ':')
		print ('* Type: ' + PSU.MODEL)
		print ('* Min. voltage output: ' + str(PSU.VMIN) + ' V')
		print ('* Max. voltage output: ' + str(PSU.VMAX) + ' V')
		print ('* Max. current output: ' + str(PSU.IMAX) + ' A')
		print ('* Settle time: ' + str(PSU.TSETTLE) + ' s')
		print ()

	return PSU



################
# main program #
################

# read config file:
config = configparser.ConfigParser()
config.read('curvetrace_config.txt')

# connect to PSUs:
PSU1 = get_PSU(config,'PSU1');
PSU2 = get_PSU(config,'PSU2');

# ask for sample name:
samplename = ''
while not samplename:
    samplename = input('Enter sample name / label: ')
    samplename = samplename.strip()

# start logfile:
logfilename = samplename + '.dat'

logfile = open(logfilename,'w')
if logfile:
    print('\nLogging output to ' + logfilename + '...\n')
else:
    print('Could not open log file!')
    exit()

# ask for voltage values / current and power limits:
try:

	print ("*** Enter test voltages applied to DUT:")

	try:
		V1 = float(input('* Start voltage (V): '))
	except ValueError:
		print ('  Invalid input!')
	if V1 < PSU1.VMIN:
		print ('  Adjusting start voltage to min. value possible with the power supply (' + str(PSU1.VMIN) + ' V).')
		V1 = PSU1.VMIN
	if V1 > PSU1.VMAX:
		print ('  Adjusting start voltage to max. value possible with the power supply (' + str(PSU1.VMAX) + ' V).')
		V1 = PSU1.VMAX

	try:
		V2 = float(input('* End voltage (V): '))
	except ValueError:
		print ('  Invalid input!')
	if V2 < PSU1.VMIN:
		print ('  Adjusting end voltage to min. value possible with the power supply (' + str(PSU1.VMIN) + ' V).')
		V2 = PSU1.VMIN
	if V2 > PSU1.VMAX:
		print ('  Adjusting end voltage to max. value possible with the power supply (' + str(PSU1.VMAX) + ' V).')
		V2 = PSU1.VMAX

	if V1 == V2:
		### print ('  Equal start end end voltages! Single point ')
		N = 1;
	else:
		try:
			N = int(input('* Number of voltage steps: '))
		except ValueError:
			print ('  Invalid input!')		
		if N < 2:
			print ('  Invalid number of voltage steps. Using N = 2...')
			N = 2

	if PSU2.configured == False:
		Vc1 = 0.0
		Vc2 = 0.0
		Nc  = 1
		Vc_idle = 0.0
		Ic_idle = 0.0

	else:
		try:
			Vc1 = float(input('* Control-pin start voltage (V): '))
		except ValueError:
			print ('  Invalid input!')
		if Vc1 < PSU2.VMIN:
			print ('  Adjusting control-pin start voltage to min. value possible with the power supply (' + str(PSU2.VMIN) + ' V).')
			Vc1 = PSU2.VMIN
		if Vc1 > PSU2.VMAX:
			print ('  Adjusting control-pin start voltage to max. value possible with the power supply (' + str(PSU2.VMAX) + ' V).')
			Vc1 = PSU2.VMAX

		try:
			Vc2 = float(input('* Control-pin end value (V): '))
		except ValueError:
			print ('  Invalid input!')
		if Vc2 < PSU2.VMIN:
			print ('  Adjusting control-pin end voltage to min. value possible with the power supply (' + str(PSU2.VMIN) + ' V).')
			Vc2 = PSU2.VMIN
		if Vc2 > PSU2.VMAX:
			print ('  Adjusting control-pin end voltage to max. value possible with the power supply (' + str(PSU2.VMAX) + ' V).')
			Vc2 = PSU2.VMAX

		if Vc1 == Vc2:
			print ('  Equal start end end control-pin voltages! Using single control-pin voltage for the test.')
			Nc = 1;
		else:
			try:
				Nc = int(input('* Number of control-pin voltage steps: '))
			except ValueError:
				print ('  Invalid input!')		
			if Nc < 2:
				print ('  Invalid number of control-pin voltage steps. Using N = 2...')
				Nc = 2


	print ("\n*** Enter DUT limits:")
	try:
		Imax = float(input('* Maximum allowed current (A): '))
	except ValueError:
		print ('  Invalid input!')
	if Imax <= 0.0:
		raise ValueError('Max. current must be positive.')
	if Imax > PSU1.IMAX:
		print ('  Adjusting current limit to max. output of the power supply (' + str(PSU1.IMAX) + ' A).')
		Imax = PSU1.IMAX

	try:
		Pmax = float(input('* Maximum allowed power (W): '))
	except ValueError:
		print ('  Invalid input!')
	if Pmax <= 0.0:
		raise ValueError('Max. power must be positive.')
	if Pmax > PSU1.VMAX * PSU1.IMAX:
		print ('  Adjusting power limit to max. output of the power supply (' + str(PSU1.VMAX*PSU1.IMAX) + ' W).')
		Pmax = PSU1.VMAX * PSU1.IMAX

	if PSU2.configured == False:
		Icmax = 0.0

	else:
		try:
			Icmax = float(input('* Control-pin max. allowed current (A): '))
		except ValueError:
			print ('  Invalid input!')
		if Icmax <= 0.0:
			raise ValueError('Max. control-pin current must be positive.')
		if Icmax > PSU2.IMAX:
			print ('  Adjusting control-pin current limit to max. output of the power supply (' + str(PSU2.IMAX) + ' A).')
			Imax = PSU2.IMAX

	try:
		N_rep = int(input('\nOPTIONAL: Number of repeats per reading [default=1]: '))
	except ValueError:
		print ('  Using default: single reading.')
		N_rep = 1
	if N_rep <= 0:
		raise ValueError('Number of repeats must be positive.')

	try:
		T_idle = float(input('\nOPTIONAL: idle time between readings (s) [default=0]: '))
	except ValueError:
		print ('  Using default: no idle time.')
		T_idle = 0.0
	if T_idle < 0:
		raise ValueError('Idle time must not be negative.')

	if T_idle == 0.0:
		V_idle = 0.0;
		I_idle = 0.0
	else:
		try:
			V_idle = float(input('OPTIONAL: voltage during idle (V, limit) [default=0]: '))
		except ValueError:
			print ('  Using default: idle voltage limit = ' + str(PSU1.VMIN) + ' V.')
			V_idle = PSU1.VMIN
		if V_idle < PSU1.VMIN:
			print ('  Adjusting idle voltage limit to min. value possible with the power supply (' + str(PSU1.VMIN) + ' V).')
			V_idle = PSU1.VMIN			
		if V_idle > PSU1.VMAX:
			print ('  Adjusting idle voltage limit to max. value possible with the power supply (' + str(PSU1.VMAX) + ' V).')
			V_idle = PSU1.VMAX
		if V_idle == 0.0:
			I_idle = 0.0
		else:
			try:
				I_idle = float(input('OPTIONAL: current during idle (A, limit) [default=1]: '))
			except ValueError:
				print ('  Using default: idle current limit = 0 A.')
				I_idle = 0.0
			if I_idle < 0:
				raise ValueError('Idle current limit must not be negative.')
			if I_idle > PSU1.IMAX:
				print ('  Adjusting idle current limit to max. output of the power supply (' + str(PSU1.IMAX) + ' A).')
				I_idle = PSU1.IMAX

# Error handling of user input:
except ValueError as e:
    print('Invalid input: ',e)
    exit()

# Print summary and ask if okay:
print('\nTest setup:')
printit('Sample: ' + samplename,logfile,'%')
printit ('Test conditions:',logfile,'%')
if N == 1:
	printit ('* Voltage across DUT = ' + str(V1) + ' V',logfile,'%')
else:
	printit ('* Voltage across DUT = ' + str(V1) + ' V ... ' + str(V2) + ' V (' + str(N) + ' steps)',logfile,'%')
printit ('* Current limit = ' + str(Imax) + ' A',logfile,'%')
printit ('* Power limit = ' + str(Pmax) + ' W',logfile,'%')
if Nc == 1:
	printit ('* Voltage at DUT control pin = ' + str(Vc1) + ' V',logfile,'%')	
else:
	printit ('* Voltage at DUT control pin = ' + str(Vc1) + ' V ... ' + str(Vc2) + ' V (' + str(Nc) + ' steps)',logfile,'%')
printit ('* Repeats per reading = ' + str(N_rep),logfile,'%')
if T_idle == 0.0:
	printit ('* No idle time between measurements',logfile,'%')
else:
	printit ('* Idle conditions between measurements: V = ' + str(V_idle) + ' V / I = ' + str(I_idle) + ' A for ' + str(T_idle) + ' seconds',logfile,'%')

input ('\nReady? Press ENTER to start testing...')

# Run the test:
print ('\nTest started...')

# Turn on PPS, with V = I = 0:
PSU1.current(0.0)
PSU1.output(True)

printit ('Column 1: voltage applied to DUT control pin (V)',logfile,'%')
printit ('Column 2: test voltage applied to DUT (V)',logfile,'%')
printit ('Column 3: DUT current (A)',logfile,'%')

for Vc in np.linspace(Vc1,Vc2,Nc):

	if PSU2.configured:
		PSU2.current(Icmax)
		PSU2.voltage(Vc)
		time.sleep(PSU2.TSETTLE) # wait for stable conditions at PSU and DUT

	for V in np.linspace(V1,V2,N):

		# Determine current limit:
		if V > 0.0:
			Ilim = min (Imax,Pmax/V)
		else:
			Ilim = Imax

		# Run the test:
		VCDUT = 0.0
		VDUT  = 0.0
		IDUT  = 0.0
		for i in range(N_rep):
			if T_idle > 0.0:
				PSU1.current(I_idle)
				PSU1.voltage(V_idle)
				PSU2.voltage(Ic_idle)
				PSU2.voltage(Vc_idle)
				time.sleep(T_idle)

			PSU1.current(Ilim) # set current limit at PSU1
			PSU1.voltage(V) # set voltage at PSU1
			time.sleep(PSU1.TSETTLE) # wait for stable conditions at PSU and DUT
			r = PSU1.reading() # read voltage and current at PSU1 terminals
			VDUT = VDUT + r[0];
			IDUT = IDUT + r[1];
			if PSU2.configured:
				r = PSU2.reading() # read voltage and current at PSU2 terminals
				VCDUT = VCDUT + r[0];

		# Determine mean of repeated readings:
		VDUT = VDUT / N_rep
		IDUT = IDUT / N_rep
		if PSU2.configured:
			VCDUT = VCDUT / N_rep
		else:
			VCDUT = 'NA'

		# Print results:
		printit ( str(VCDUT) + ' ' + str(VDUT) + ' ' + str(IDUT) , logfile )

# Set PSU output to zero:
PSU1.voltage(0)
PSU1.current(0)

# Say goodbye:
print ('Test completed.')
