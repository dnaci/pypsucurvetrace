#!/usr/bin/env python3

# Curve tracer program:
# Use one PPS power supply to determine a single trace of a two-terminal DUT:
# * Read configuration file (for PPS PSU connections)
# * Ask for sample name and start a log file for the test
# * Ask for the min. and max. voltage to be applied to the DUT
# * Ask for number of voltage steps
# * Ask for current limit (max. current allowed for the DUT)
# * Ask for power limit (max. power allowed for the DUT)
# * Apply specified voltages to to DUT and read the current
# * Output the voltage / current data
#
# Hardware setup:
# * Computer connected to programmable Voltcraft PPS power supply via USB cable (UART interface in PPS)
# * DUT device connected to power supply output:
#	PSU-POS -- DUT-1
#	PSU-NEG -- DUT-2
#
# This file is part of curvetracePy, a toolbox for curve tracing using programmable Voltcraft PPS power supplies.
#
# curvetracePy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# curvetracePy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ruediPy.  If not, see <http://www.gnu.org/licenses/>.
# 
# curvetracePy: a toolbox for operation of PEM electrolysis cells.
# Copyright 2020, Matthias Brennwald (mbrennwa@gmail.com)

# make shure Python knows where to look for the curvetracePy Python code
# http://stackoverflow.com/questions/4580101/python-add-pythonpath-during-command-line-module-run
# Example (bash): export PYTHONPATH=~/curvetracePy

# imports:
### import argparse
### import datetime
import time
import configparser
import numpy as np
from termcolor import colored
import powersupply_PPS


############################
# fuN2tion to print output #
############################

def printit(text,f='',comm=''):
	# print date/time followed by text either to stdout (if f is empty) or to file (if f is not empty)
	# prepend date/time:
	# now = datetime.datetime.now()
	# text = now.strftime("%Y-%m-%d %H:%M:%S") + '\t' + text

	#print text:
	print(text)
	if f:
		if len(comm):
			text = comm + ' ' + text
		print(text,file=f)
		f.flush()
	return


######################################
# connect and configure power supply #
######################################

def connect_PSU(config,label):
	
	if len(config[label]['COMPORT']) == 0:
		print('COM port for power supply ' + label + 'empty. Leaving ' + label + ' uN2onfigured.')
		PSU.VMAX = 0.0
		PSU.VMIN = 0.0
		PSU.IMAX = 0.0
		PSU.TSETTLE = 0.0
		PSU.MODEL = 'NONE'
		PSU.configured = False

	else:
		# connect to PSU:
		print ('Connecting to power supply ' + label + '...')
		PSU = powersupply_PPS.PPS(port=config[label]['COMPORT'], reset=False, prom=None)
		PSU.output(False) # make sure it is turned off

		# determine minimum voltage of the PSU:
		PSU.VMIN = float(config[label]['VOLTAGE_MIN'])

		# determine settle time:
		PSU.TSETTLE = float(config[label]['SETTLE_SECONDS'])

		# turn on PSU with zero output:
		PSU.voltage(PSU.VMIN)
		PSU.current(0)
		PSU.output(True)

		PSU.label = label		

		PSU.configured = True

		# show summary
		print ('* Type: ' + PSU.MODEL)
		print ('* Min. voltage output: ' + str(PSU.VMIN) + ' V')
		print ('* Max. voltage output: ' + str(PSU.VMAX) + ' V')
		print ('* Max. current output: ' + str(PSU.IMAX) + ' A')
		print ('* Settle time: ' + str(PSU.TSETTLE) + ' s')
		print ()

	return PSU



###############################
# configure PSU test settings #
###############################

def psu_config(PSU):
	
	if PSU.configured == False:
		print ('PSU NOT CONFIGURED ** DO SOMETHING SMART HERE **')
		V2_LOW = 0.0
		V2_HIGH = 0.0
		N2  = 1
		V2_IDLE = 0.0
		I2_IDLE = 0.0

	else:
		print ("Configure ' + PSU.label + ' settings:")

		try:
			PSU.V_START = float(input('* ' + PSU.LABEL + ' start voltage (V): '))
		except ValueError:
			print ('  Invalid input!')
		if PSU.V_START < PSU.VMIN:
			print ('  Adjusting start voltage to min. value possible with the power supply (' + str(PSU.VMIN) + ' V).')
			PSU.V_START = PSU.VMIN
		if PSU.V_START > PSU.VMAX:
			print ('  Adjusting start voltage to max. value possible with the power supply (' + str(PSU.VMAX) + ' V).')
			PSU.V_START = PSU.VMAX

		try:
			PSU.V_END = float(input('* ' + PSU.LABEL + ' end voltage (V): '))
		except ValueError:
			print ('  Invalid input!')
		if PSU.V_END < PSU.VMIN:
			print ('  Adjusting end voltage to min. value possible with the power supply (' + str(PSU.VMIN) + ' V).')
			PSU.V_END = PSU.VMIN
		if PSU.V_END > PSU.VMAX:
			print ('  Adjusting end voltage to max. value possible with the power supply (' + str(PSU.VMAX) + ' V).')
			PSU.V_END = PSU.VMAX

		if PSU.V_START == PSU.V_END:
			PSU.N = 1;
		else:
			try:
				PSU.N = int(input('* ' + PSU.LABEL + ' number of voltage steps: '))
			except ValueError:
				print ('  Invalid input!')		
			if PSU.N < 2:
				print ('  Invalid number of voltage steps. Using N = 2...')
				PSU.N = 2


		try:
			PSU.ILIMIT = float(input('* ' + PSU.LABEL + ' maximum allowed current (A): '))
		except ValueError:
			print ('  Invalid input!')
		if PSU.ILIMIT <= 0.0:
			raise ValueError('Max. current must be positive.')
		if PSU.ILIMIT > PSU.IMAX:
			print ('  Adjusting current limit to max. output of the power supply (' + str(PSU1.IMAX) + ' A).')
			PSU.ILIMIT = PSU.IMAX

		try:
			PSU.PLIMIT = float(input('* ' + PSU.LABEL + ' maximum allowed power (W): '))
		except ValueError:
			print ('  Invalid input!')
		if PSU.PLIMIT <= 0.0:
			raise ValueError('Max. power must be positive.')
		if PSU.PLIMIT > PSU.VMAX * PSU.IMAX:
			print ('  Adjusting power limit to max. output of the power supply (' + str(PSU.VMAX*PSU.IMAX) + ' W).')
			PSU.PLIMIT = PSU.VMAX * PSU.IMAX

	return PSU




################
# main program #
################

# read config file:
config = configparser.ConfigParser()
config.read('curvetrace_config.txt')

# connect to PSUs:
PSU1 = connect_PSU(config,'PSU1');
PSU2 = connect_PSU(config,'PSU2');

# ask for sample name:
samplename = ''
while not samplename:
    samplename = input('Enter sample name / label: ')
    samplename = samplename.strip()

# start logfile:
logfilename = samplename + '.dat'

logfile = open(logfilename,'w')
if logfile:
    print('\nLogging output to ' + logfilename + '...\n')
else:
    print('Could not open log file!')
    exit()

# ask for voltage values / current and power limits:
PSU1 = get_steps (PSU1)
PSU2 = get_steps (PSU2)


# set up repeats:
		try:
			N_rep = int(input('\nOPTIONAL: Number of repeats per reading [default=1]: '))
		except ValueError:
			print ('  Using default: single reading.')
			N_rep = 1
		if N_rep <= 0:
			raise ValueError('Number of repeats must be positive.')


# set up idling:

		try:
			T_idle = float(input('\nOPTIONAL: idle time between readings (s) [default=0]: '))
		except ValueError:
			print ('  Using default: no idle time.')
			T_idle = 0.0
		if T_idle < 0:
			raise ValueError('Idle time must not be negative.')

		if T_idle == 0.0:
			V_idle = 0.0;
			I_idle = 0.0
		else:
			try:
				V_idle = float(input('OPTIONAL: voltage during idle (V, limit) [default=0]: '))
			except ValueError:
				print ('  Using default: idle voltage limit = ' + str(PSU1.VMIN) + ' V.')
				V_idle = PSU1.VMIN
			if V_idle < PSU1.VMIN:
				print ('  Adjusting idle voltage limit to min. value possible with the power supply (' + str(PSU1.VMIN) + ' V).')
				V_idle = PSU1.VMIN			
			if V_idle > PSU1.VMAX:
				print ('  Adjusting idle voltage limit to max. value possible with the power supply (' + str(PSU1.VMAX) + ' V).')
				V_idle = PSU1.VMAX
			if V_idle == 0.0:
				I_idle = 0.0
			else:
				try:
					I_idle = float(input('OPTIONAL: current during idle (A, limit) [default=1]: '))
				except ValueError:
					print ('  Using default: idle current limit = 0 A.')
					I_idle = 0.0
				if I_idle < 0:
					raise ValueError('Idle current limit must not be negative.')
				if I_idle > PSU1.IMAX:
					print ('  Adjusting idle current limit to max. output of the power supply (' + str(PSU1.IMAX) + ' A).')
					I_idle = PSU1.IMAX






# Print summary and ask if okay:
print('\nTest setup:')
printit('Sample: ' + samplename,logfile,'%')
printit ('Test conditions:',logfile,'%')
if N == 1:
	printit ('* Voltage across DUT = ' + str(V1) + ' V',logfile,'%')
else:
	printit ('* Voltage across DUT = ' + str(V1) + ' V ... ' + str(V2) + ' V (' + str(N) + ' steps)',logfile,'%')
printit ('* Current limit = ' + str(Imax) + ' A',logfile,'%')
printit ('* Power limit = ' + str(Pmax) + ' W',logfile,'%')
if N2 == 1:
	printit ('* Voltage at DUT control pin = ' + str(V2_LOW) + ' V',logfile,'%')	
else:
	printit ('* Voltage at DUT control pin = ' + str(V2_LOW) + ' V ... ' + str(V2_HIGH) + ' V (' + str(N2) + ' steps)',logfile,'%')
printit ('* Repeats per reading = ' + str(N_rep),logfile,'%')
if T_idle == 0.0:
	printit ('* No idle time between measurements',logfile,'%')
else:
	printit ('* Idle conditions between measurements: V = ' + str(V_idle) + ' V / I = ' + str(I_idle) + ' A for ' + str(T_idle) + ' seconds',logfile,'%')

input ('\nReady? Press ENTER to start testing...')

# Run the test:
print ('\nTest started...')

# Turn on PPS, with V = I = 0:
PSU1.current(0.0)
PSU1.output(True)

printit ('Column 1:  PSU1 voltage setting (V)',logfile,'%')
printit ('Column 2:  PSU1 current setting (A)',logfile,'%')
printit ('Column 3:  PSU1 voltage measurement (V)',logfile,'%')
printit ('Column 4:  PSU1 current measurement (I)',logfile,'%')
printit ('Column 5:  PSU1 limiter flag',logfile,'%')
printit ('Column 6:  PSU2 voltage setting (V)',logfile,'%')
printit ('Column 7:  PSU2 current setting (A)',logfile,'%')
printit ('Column 8:  PSU2 voltage measurement (V)',logfile,'%')
printit ('Column 9:  PSU2 current measurement (I)',logfile,'%')
printit ('Column 10: PSU2 limiter flag',logfile,'%')

for V2 in np.linspace(V2_LOW,V2_HIGH,N2):

	if PSU2.configured:
		PSU2.current(Icmax)
		PSU2.voltage(V2)
		time.sleep(PSU2.TSETTLE) # wait for stable conditions at PSU and DUT

	for V in np.linspace(V1,V2,N):

		# Determine current limit:
		if V > 0.0:
			Ilim = min (Imax,Pmax/V)
		else:
			Ilim = Imax

		# Run the test:
		V2DUT = 0.0
		VDUT  = 0.0
		IDUT  = 0.0
		for i in range(N_rep):
			if T_idle > 0.0:
				# set output to zero (to avoid overshoot)
				PSU1.current(0)
				PSU1.voltage(PSU1.VMIN)

				# set idle conditions:
				PSU2.voltage(Ic_idle)				
				PSU1.current(I_idle)
				PSU1.voltage(V_idle)
				PSU2.voltage(V2_idle)

				# wait idle time:
				time.sleep(T_idle)

				# set output to zero (to avoid overshoot when starting next measurement)
				PSU1.current(0)
				PSU1.voltage(PSU1.VMIN)

				# return to required control-pin voltage:
				if PSU2.configured:
					PSU2.voltage(V2)
					time.sleep(PSU2.TSETTLE) # wait for stable conditions

			# set up measurement conditions:
			PSU1.current(Ilim) # set current limit at PSU1
			PSU1.voltage(V) # set voltage at PSU1
			time.sleep(PSU1.TSETTLE) # wait for stable conditions at PSU and DUT
			r = PSU1.reading() # read voltage and current at PSU1 terminals
			VDUT = VDUT + r[0];
			IDUT = IDUT + r[1];
			if PSU2.configured:
				r = PSU2.reading() # read voltage and current at PSU2 terminals
				V2DUT = V2DUT + r[0];

		# Determine mean of repeated readings:
		VDUT = VDUT / N_rep
		IDUT = IDUT / N_rep
		if PSU2.configured:
			V2DUT = V2DUT / N_rep
		else:
			V2DUT = 'NA'
			V2 = 'NA'

		if IDUT > Ilim-0.02:
			flag_PSU1_limit = 1
		else:
			flag_PSU1_limit = 0

		# Print results:




		printit ( str(V) + ' ' + str(V2) + ' ' + str(VDUT) + ' ' + str(V2DUT) + ' ' + str(IDUT) + ' ' + str(ICDUT) + ' ' +  str(flag_PSU1_limit) , logfile )




		### printit ( str(V2DUT) + ' ' + str(VDUT) + ' ' + str(IDUT) + ' ' + str(flag_IP_limit) , logfile )

# Set PSU output to zero:
PSU1.voltage(PSU1.VMIN)
PSU1.current(0)
PSU2.voltage(PSU2.VMIN)
PSU2.current(0)

# Say goodbye:
print ('Test completed.')
